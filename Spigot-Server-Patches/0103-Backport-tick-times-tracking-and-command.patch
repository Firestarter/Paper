From 72fce658bd64c13c209b114e17c433bae309e926 Mon Sep 17 00:00:00 2001
From: Mykyta Komarn <nkomarn@hotmail.com>
Date: Mon, 10 Aug 2020 12:11:54 -0700
Subject: [PATCH] Backport tick times tracking and command


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index b400ce04..3c9d177c 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -81,6 +81,11 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     private int F;
     private int G = 0;
     public final long[] h = new long[100];
+    // Paper start - tick times
+    public final TickTimes tickTimes5s = new TickTimes(100);
+    public final TickTimes tickTimes10s = new TickTimes(200);
+    public final TickTimes tickTimes60s = new TickTimes(1200);
+    // Paper end
     public long[][] i;
     private KeyPair H;
     private String I;
@@ -745,7 +750,12 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         }
 
         this.methodProfiler.a("tallying");
-        this.h[this.ticks % 100] = System.nanoTime() - i;
+        // Paper start - tick times
+        long l = this.h[this.ticks % 100] = System.nanoTime() - i;
+        tickTimes5s.add(this.ticks, l);
+        tickTimes10s.add(this.ticks, l);
+        tickTimes60s.add(this.ticks, l);
+        // Paper end
         this.methodProfiler.b();
         this.methodProfiler.a("snooper");
         if (getSnooperEnabled() && !this.n.d() && this.ticks > 100) {  // Spigot
@@ -1592,4 +1602,30 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     public Thread aM() {
         return this.serverThread;
     }
+
+    // Paper start - tick times
+    public static class TickTimes {
+        private final long[] times;
+
+        public TickTimes(int length) {
+            times = new long[length];
+        }
+
+        void add(int index, long time) {
+            times[index % times.length] = time;
+        }
+
+        public long[] getTimes() {
+            return times.clone();
+        }
+
+        public double getAverage() {
+            long total = 0L;
+            for (long value : times) {
+                total += value;
+            }
+            return ((double) total / (double) times.length) * 1.0E-6D;
+        }
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
index d6d9899e..953aa0dd 100644
--- a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
+++ b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
@@ -19,6 +19,7 @@ import org.bukkit.Material;
 import org.bukkit.command.Command;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
+import org.github.paperspigot.command.MSPTCommand;
 
 public class PaperSpigotConfig
 {
@@ -56,6 +57,7 @@ public class PaperSpigotConfig
         config.options().copyDefaults( true );
 
         commands = new HashMap<String, Command>();
+        commands.put("mspt", new MSPTCommand("mspt"));
 
         version = getInt( "config-version", 9 );
         set( "config-version", 9 );
diff --git a/src/main/java/org/github/paperspigot/command/MSPTCommand.java b/src/main/java/org/github/paperspigot/command/MSPTCommand.java
new file mode 100644
index 00000000..7b73a1c3
--- /dev/null
+++ b/src/main/java/org/github/paperspigot/command/MSPTCommand.java
@@ -0,0 +1,64 @@
+package org.github.paperspigot.command;
+
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+
+import java.text.DecimalFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
+public class MSPTCommand extends Command {
+
+    private static final DecimalFormat DF = new DecimalFormat("########0.0");
+
+    public MSPTCommand(String name) {
+        super(name);
+        this.description = "View server tick times";
+        this.usageMessage = "/mspt";
+        this.setPermission("bukkit.command.mspt");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args) throws IllegalArgumentException {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        MinecraftServer server = MinecraftServer.getServer();
+
+        List<String> times = new ArrayList<>();
+        times.addAll(eval(server.tickTimes5s.getTimes()));
+        times.addAll(eval(server.tickTimes10s.getTimes()));
+        times.addAll(eval(server.tickTimes60s.getTimes()));
+
+        sender.sendMessage("§6Server tick times §e(§7avg§e/§7min§e/§7max§e)§6 from last 5s§7,§6 10s§7,§6 1m§e:");
+        sender.sendMessage(String.format("§6◴ %s§7/%s§7/%s§e, %s§7/%s§7/%s§e, %s§7/%s§7/%s", times.toArray()));
+        return true;
+    }
+
+    private static List<String> eval(long[] times) {
+        long min = Integer.MAX_VALUE;
+        long max = 0L;
+        long total = 0L;
+        for (long value : times) {
+            if (value > 0L && value < min) min = value;
+            if (value > max) max = value;
+            total += value;
+        }
+        double avgD = ((double) total / (double) times.length) * 1.0E-6D;
+        double minD = ((double) min) * 1.0E-6D;
+        double maxD = ((double) max) * 1.0E-6D;
+        return Arrays.asList(getColor(avgD), getColor(minD), getColor(maxD));
+    }
+
+    private static String getColor(double avg) {
+        return ChatColor.COLOR_CHAR + (avg >= 50 ? "c" : avg >= 40 ? "e" : "a") + DF.format(avg);
+    }
+}
-- 
2.25.1

