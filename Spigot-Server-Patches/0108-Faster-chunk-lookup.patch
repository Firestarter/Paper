From 4c9812bba79d5d4a522d172591441cdacb518f46 Mon Sep 17 00:00:00 2001
From: Mykyta Komarn <nkomarn@hotmail.com>
Date: Wed, 12 Aug 2020 13:15:54 -0700
Subject: [PATCH] Faster chunk lookup


diff --git a/src/main/java/net/minecraft/server/ChunkProviderFlat.java b/src/main/java/net/minecraft/server/ChunkProviderFlat.java
index b939f47a..2441c28a 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderFlat.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderFlat.java
@@ -127,6 +127,13 @@ public class ChunkProviderFlat implements IChunkProvider {
         return chunk;
     }
 
+    // Paper start
+    @Override
+    public Chunk getOrCreateChunkFast(int i, int j) {
+        return getOrCreateChunk(i, j);
+    }
+    // Paper end
+
     public boolean isChunkLoaded(int i, int j) {
         return true;
     }
diff --git a/src/main/java/net/minecraft/server/ChunkProviderGenerate.java b/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
index ad464d32..3f011502 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
@@ -195,6 +195,13 @@ public class ChunkProviderGenerate implements IChunkProvider {
         return chunk;
     }
 
+    // Paper start
+    @Override
+    public Chunk getOrCreateChunkFast(int i, int j) {
+        return getOrCreateChunk(i, j);
+    }
+    // Paper end
+
     private void a(int i, int j, int k) {
         this.g = this.b.a(this.g, i, k, 5, 5, (double) this.r.e, (double) this.r.f, (double) this.r.g);
         float f = this.r.a;
diff --git a/src/main/java/net/minecraft/server/ChunkProviderHell.java b/src/main/java/net/minecraft/server/ChunkProviderHell.java
index 0156892a..a28148d5 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderHell.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderHell.java
@@ -218,6 +218,13 @@ public class ChunkProviderHell implements IChunkProvider {
         return chunk;
     }
 
+    // Paper start
+    @Override
+    public Chunk getOrCreateChunkFast(int i, int j) {
+        return getOrCreateChunk(i, j);
+    }
+    // Paper end
+
     private double[] a(double[] adouble, int i, int j, int k, int l, int i1, int j1) {
         if (adouble == null) {
             adouble = new double[l * i1 * j1];
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 312dd8b6..cc2cf52d 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -111,6 +111,13 @@ public class ChunkProviderServer implements IChunkProvider {
 
     }
 
+    // Paper start - faster chunk performance
+    public Chunk getOrCreateChunkFast(int x, int z) {
+        Chunk chunk = chunks.get(LongHash.toLong(x, z));
+        return chunk == null ? getChunkAt(x, z) : chunk;
+    }
+    // Paper end
+
     // CraftBukkit start - Add async variant, provide compatibility
     public Chunk getChunkIfLoaded(int x, int z) {
         return chunks.get(LongHash.toLong(x, z));
diff --git a/src/main/java/net/minecraft/server/IChunkProvider.java b/src/main/java/net/minecraft/server/IChunkProvider.java
new file mode 100644
index 00000000..68c61cb1
--- /dev/null
+++ b/src/main/java/net/minecraft/server/IChunkProvider.java
@@ -0,0 +1,36 @@
+package net.minecraft.server;
+
+import java.util.List;
+
+public interface IChunkProvider {
+
+    boolean isChunkLoaded(int i, int j);
+
+    Chunk getOrCreateChunk(int i, int j);
+
+    Chunk getOrCreateChunkFast(int i, int j); // Paper
+
+    Chunk getChunkAt(BlockPosition blockposition);
+
+    void getChunkAt(IChunkProvider ichunkprovider, int i, int j);
+
+    boolean a(IChunkProvider ichunkprovider, Chunk chunk, int i, int j);
+
+    boolean saveChunks(boolean flag, IProgressUpdate iprogressupdate);
+
+    boolean unloadChunks();
+
+    boolean canSave();
+
+    String getName();
+
+    List<BiomeBase.BiomeMeta> getMobsFor(EnumCreatureType enumcreaturetype, BlockPosition blockposition);
+
+    BlockPosition findNearestMapFeature(World world, String s, BlockPosition blockposition);
+
+    int getLoadedChunks();
+
+    void recreateStructures(Chunk chunk, int i, int j);
+
+    void c();
+}
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 180290bb..1561e632 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -356,7 +356,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public Chunk getChunkAt(int i, int j) {
-        return this.chunkProvider.getOrCreateChunk(i, j);
+        return this.chunkProvider.getOrCreateChunkFast(i, j);
     }
 
     public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 438487fc..9723722c 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -142,7 +142,7 @@ public class CraftWorld implements World {
     // PaperSpigot end
 
     public Chunk getChunkAt(int x, int z) {
-        return this.world.chunkProviderServer.getChunkAt(x, z).bukkitChunk;
+        return this.world.chunkProviderServer.getOrCreateChunkFast(x, z).bukkitChunk; // Paper
     }
 
     public Chunk getChunkAt(Block block) {
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
index 04dd15db..fce5f7b7 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
@@ -180,6 +180,13 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
         return chunk;
     }
 
+    // Paper start
+    @Override
+    public Chunk getOrCreateChunkFast(int i, int j) {
+        return getOrCreateChunk(i, j);
+    }
+    // Paper end
+
     @Override
     public Chunk getChunkAt(BlockPosition blockPosition) {
         return getChunkAt(blockPosition.getX() >> 4, blockPosition.getZ() >> 4);
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/NormalChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/NormalChunkGenerator.java
index fc4bc81f..6ed74e01 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/NormalChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/NormalChunkGenerator.java
@@ -41,6 +41,13 @@ public class NormalChunkGenerator extends InternalChunkGenerator {
         return provider.getOrCreateChunk(i, i1);
     }
 
+    // Paper start
+    @Override
+    public Chunk getOrCreateChunkFast(int i, int j) {
+        return this.provider.getOrCreateChunkFast(i, j);
+    }
+    // Paper end
+
     @Override
     public Chunk getChunkAt(BlockPosition blockPosition) {
         return provider.getChunkAt(blockPosition);
-- 
2.25.1

